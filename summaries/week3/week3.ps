%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: week3.dvi
%%CreationDate: Sat Apr 16 13:23:57 2016
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR17 CMR12 CMR10 CMBX12
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter week3.dvi -o week3.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.04.16:1323
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 52 /four put
dup 67 /C put
dup 83 /S put
dup 97 /a put
dup 101 /e put
dup 104 /h put
dup 109 /m put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 121 /y put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7B00AD58FAF645
1297991B5D01701E82228D0313FC7C66B263BC79ACDDF9AAC48A3CBF42B96E38
583E1D059953076D68148DC8B6C9527B3A74CE7DEF788A11531F44120BDF0F61
0B2F3ED94EEBCDE4ACD23834C242AA4314B9EF98E4BE72DB76EBDD0A028CEA9D
B4C38C1F2D24B8FDE686832FE96204552C820E45B6BAF0C3308742AE2BFDE813
E71A29FD148B9DBEFCB126CDF69A9EF4EBA26EE4668881DBB4AC1E64BEA6F694
0FD124F3084CDC270314C8BE814EEF5767706866041214ED448ED38DA5E839F0
9494304D1AE297A62F72AD3C62E45CAD52517A866AA9895B951D5F2116F5579D
EF2235548A06522C439CB7A9DDEE0D45F8E5C8AB3E42A43E82F79E2CDBA53F44
B6FE8EB127E03F50AA29B5F4177D0942D32BB9926629D92169CC8083247BA55F
1F076975E7F1ACCDD730842777655CDB01BAB0E492BB7DF99BE0B260545FB0FA
7BF772E3A612BCE58723AFC7CC487E33D9E0DEAB7B3CCA34A2820DFDAB5F1597
DEF966D01B40F424992777B22E7D8ACF4ACDDEFF949978BD10EB0683D42EFCB5
6B2466D03CE07F6B8720A01F1373C7067BE87E587A830F661BCEB93B4E9B6928
0F2609EF2DC10E074D813B8681DBAE7B89F24E71529AC715B299EE740EBC511B
BCA366896539FAC81C4EE555EA033CCE3B4BAA97BAE10F27F5B155993C6D0EA8
793237E3758264AF9544D9600E6DEF34AFD7374CB0311663CBDC623C8E1B5152
0DDF237B6B0EB46F8012266F0412735F614DB1ED1082C5D8EE55B1F620251203
764D4172B59A365352CCEAC135F54EA13BB7EF647FA8EFBCA156338E725AE009
5618ACFB4A291CB0CF2DE24A831E5D4775A3493B9B0E771ADEA8D1630C75F232
25F660152D3D60A393C0BB98DB50B42B20B373772A42720A9FE886D25010CC6F
04A732DD51ED948F79AA24FD747DEF94484E32C099602F4DA034373D7B1394BE
9F7C003031C2E573169F38AE4CC59C5C205BC5ADA8DED5E438517C91B48A8669
F94C23C7E6E3A8F9AB4A58E1D20EA4EC22518A322CB3B0B18A2B018054694A46
BD4C46465F25CA2A8EEAE009D49BAD56A3CD169C30017BB1E47099AFC6A7B68D
B5FC3560648932E90DDEF5CC608AF48FB28BFC93E57D6645201A6972A776B285
B274FB527CB0834D31C8DBF5DC72AEAE5777FBB8D36EB3CEEC5A061CC2EF07DA
051F5B9FE01F3E3BB3E62A516BB067EAB90C149BFF902136B27C3B65A6CB40F0
88112F9A1EF41AC0CDD77F04BE2C288DD7735DF9B07184B6996D054B4BE0F9FB
6E0F268DCC80D0202E0714A6CDA465BDB869C08BB2282E9599CFE309DE44136A
A57D8E0ED1A2B040D13EB4F62A815615787EE7A0B0EF1C27C6F0D109AB0958A6
D547BFA0392DA3E882F81D2EB6CD54F070952B68B58609E8200E58F243743171
843B8A8E9DC72A4C490766C71CF73E9DC04DA2692875A70BA2B340EB3C7662D1
5AC67FE779A6A014968B5514CB560DB13CF7687336D8D79832974A59CFD6FC81
8B11A8B9BFB2DF49AB4178C09159D3C56120309FEFDE559BA8372F4C8F27718D
227CC9FE00593BAD4B38B31EEB74D387CFD0BFB0EDC52CAAB215A395554499CD
ECEE9B6FA61E93E7AA85289D74F3A267090B876AE77B07660B96F9A7BD06775B
257F237E67FDEFFF38C5CE2B6A9001A54D171B378A40A39DFEA585D864190633
5CC78E99C51EBDB26CC7FDB62825E724B35371D4E5F9192DD64EEA8D0C3B0AF3
D6F18ECBE69790FB38682CEBF54428218203A295779C987C3EC066938D62BE77
E41D88871F1BADDED8A1D8418A6CA19B9CE598178ED4BFF677CF2A50CB068EA9
9D2543E14027D9D95A1C8E486E1A3B4D4D692FB6DE867A8EBF2B746BAB6C4A51
73D03CCDCA5DB0CF26C4D68280E0B74E5106A387B4B4C76705B4B1B305441D3E
28EC2F11EEEDFBBE3CE9D394F484D70DD1BABB7EE6E0343E39EECD7405C4444A
46D1440BF7DA5C48CA74B2FF43C6FC6FADDA2B289D1936DE59B5054B98428FCF
5217D6257F80F4570AB21DF6FF6A9BD4ADA8CBA919546F9C022A5A80513A9A00
4B805162B3A4C88DED1CF6395D82EE86BFC6BFA5DD99956CEAE59D8D83F795E2
1965900C177E7C347F5F5EC0380B3B64F5F8F2E2EBFBAB85EF9F8859DC443F6B
85DD53C6BBF0ABBA7A1C4A081637B58DA5FD142F76C311A75AE83B7460938965
2603F08F8FF0B8BE5DA3B214C02A5D1EFF2B851AB53D52ADD00F7E25EE04E3A7
BFD32FDE216A01E5C8FC6EA47B70D7F530B986D0270C083FDA06A666F27BCB66
B2D6265661A909DED2EA51F2334EA9430573F47B6828E06871C448D3E51D0B20
CD44F73C39AE2F4DD46F3282AE4DBFF1878AACAE6750E168820ECEE4220AE261
B85B619E9D25B6F649A85B3B0A7F23FF9AA920D8987FB8540A5A1CAF54AD21B2
B8D24BBCA7DCB924D14674CD8372D3A73E8D8883EDF3FE625A8DC023242D0D62
661BD8F140FA8FE7706CEED27809BAE8812D7F01E613008BCB955D07E3D0E536
D0E0BCEC047F5D35F4453FE404CA8E8500B284FE306D407C44C1E8AF540F2B03
A6CC1F84C2BEB39012E7DFD0701EE53D393AB8B96E79802916F3B496BD0DFAC6
786C7BC9D5A96620357847553B4C647540C4AAB834297B0BD03DA3F26407092D
62AC8C913911C35FD6E821C8660857BDD132CB5B0623747680502CD3383A17CB
82B46BC6AF490BEC5049CFB691934A18EE5020CEDD55959CCB8D313F8665A7E0
69B3ABE16D1DF496D879FD57D8052AA1FFA8394FE66B58584BC3A28879D7E523
E0B6F36DD69246D4E9C292A75B03F0682C379581A07D841E80FD0F2F5753C443
481F9E22FE2D2BFF0EF96C55BD148F0AFF2E4DF6C729A3EF96EC965F2861E027
53A255BB22EF794974B1F7775C7AD84C0F091DD95942BAC8D8BED2DC46CA6A4A
385C8A2518CC39186DCFED92DB6720616FA07FACAB9A630FF0D0C3EEB316225C
9E3A53572C5DCCB5690792400E5F87649C9E0CE16D6D1125E69E1159A808A898
99F4E035AB5D66E5AEA91B561E4CE44C01B33E418E2B6F45D87D2EF203589B4B
D61A40777686B18DC738E6A5AD9CC5F9E77B054AD47519F7AD037DC879EB056D
F3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 68 /D put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 79 /O put
dup 82 /R put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BC784E9865B00EE8B49B918E886049F1F4939403EADAB83A4D8C332E
2221AF8F6F4A4954501CB6A6268AC96F7091245F034BD65542DF47BC7BBAD667
1EE6AF9187E298CB7AABA58E3FB5B4C7E86616C1A830A4A937C265CC28A83EED
8F3C971D6DF5A50A615B713F5332E0CF05C754FD76916FECE4DB2807334C34E1
E2418FFF1B4429A564AB857F1E23337C75E729645AED52B51C319F277F0FD789
C8D5F56EE75D274F2162F53AA09B150479161D8B2F5FDCEA0020FDC7A51E4AB0
041A3247EB7E667B2842D65A5E184D7383D4B7034808F6E4E32CEF72DFAD9C60
730CDB6C87A6D571108A5969895654C00A5F30A5F801DB459733371B4B292AD4
367DDC8671EC48E447C84A11C0CD332175E5278EA0678603F85C0F3013AEB1B2
AADDB2337DB914580A9547B6CDB7F4CCD34EAF4555F34F8023B15D44707987E8
E672F486552480FFE3D56EF1EC01FC6D89CDDD2FD96D9E404038CB57A8018789
80B52AFEE8453D4E3BC4EE8A4A756BC40DDC6160B3B9E71135C7DA6B98DEF03A
5F41064D7C0BFEBBDC25EF0F3B74E35560D16C105DBDFFEA47AA88871AAAC76A
F9209DF0314DD262730444631902B926B5B5D0DFAADC10A37F56A2E2E35F0552
8CF368347BB741A8DA0EE9AEA9B433559B56FB9D2DC3F59ABF7FD33E36D80878
688B08BD374C33FD2DF508C2C04227F52844EC5D50285E7C2ED1A7ED75698DD4
CF4F8D405513A62B80DA50080E7FFDE8B2ED7FF593EB207AFEC6A4A6795EF21A
B73787C54A613BA834ADDFC31E3C30BE9573B8E1D4660882402096322E7329E1
F45087C1B70095A7E372CDCC0A5CEB3FC42CEF215EE88D14C49D6360A21F17F7
D5DB508394A6D41C9A89CB55D0447B94C2F3CBB8FBFB783EE57541A9C9A4CE84
82AD4BE58057CB7DDF52D82D8533DB41F959CF3B3FD21761FC7FBBE95D3FEBBE
D82D982F35866BA488BC0B12BEF34533C9C6E9DE816424BB42507B720052FE2C
7A0904110838AECA115FE30ADF27312488ACA3A78A2BEF26F39B7A220DF312BC
CA1668ABC462E651F7AF55CA8A6CD48A6F3C458E2DF964FE023485025E4A0780
5AC5C7170476B11E65E254EC81E253D4BCF233E83E6797850836FD032031F8E5
DCCB8B33D8D65D7E111978A8D39B974BC60773AC5BF835076426BEADE12D89E1
56ACB3F10A1801F7F0D871E6840CF5D1AF88BF7529BC02F9E852DD6CFB016460
9B5FAF30E81B612555168BCFE359EA9AE0AA0C48F96BD4C14774096C15544F1F
9412963F956984B2A7838F0F35C59BA69BD4E06C02382EF2547A39835785BCFD
E1171F60E2FAEAA0F910FFBAD16F266E23D6C8841042CCD2724C3A5C88E47E98
904F054EF2FD878FC60DB9D5677D79EF02BDEF119F438BA227EC8D2EEB4FE562
4DCA2C69FD82126C5D27093FD7DF764C8C90FA6C0CC29FF335F23E241517125C
33F3937167B6835210347013AB302A5F137B944D11A5B7E5C8EA6B162B095B13
3C07D7D774628F9F40CB394192EAAA7C2669C13D2C60D8CAD537E58BB28B1808
FEFE537C9C06D84C31749A24B07949BD2E91FCFF1BC440C90D612BA72143EE83
55BC7677C7453A4187FE9AE4C75AAE0CDA2BD48C055E12811FDB863FEAB1C846
F146B4D275E6DEE79B28092924C63F7603E1F6E1412D513D92F88DD12B5AAA84
96C07512076470F6187F1AABE47634989837814A9904A95ADF50DA8FF0175CE0
F8CB6AF1618357FE3A7C524FF59519ABA385BC965F49C5F44C2283B3D30C3EA5
D2D648FCAFDDF621B6C6340928127469E3CCD35689FFCC6448B84451975287AC
FA4F043C14F9C3BDEB8BD50EB68F70BF0C46B494F3E8E8C38E241633FC39828D
1216F7E7FB83587EBD5FE778269D0D8BF180D92F078854E5BE9F79AD23FB0827
7690187251CDC23D4A992F8A7C8F0F3CC215B04745E062F68DC80A71544A76B7
D09F81B83DA2FA5C90A875069E27AC5318434F7F819D174B4D92F5DBE23EE5B2
AE1C48DD8D033C9B2E2F9D067237825D959E4CF46C0643902418BB899138EF09
0A974F835188A3EBA9D38EA126E62C63B9361D8728F33759EC8E2EAED0AD55A3
B221661505F14729AD52EFEE204E1D6580326CB11B0F09512F102181D473264A
1F9ECCF81B929AD103163EA3440EBF7732DFFD584AC688B762A9025FE3816A4B
C12085731EC57E4A4040548639E376A6A1CC8E82FE0584DFEF497C81B8009FD3
12FC25F0D2B221D298B92676DCA378BE680B387D4C8ACE2FFF15536B960D56C9
2991EFD936275C58F214948C608192BEDDDE6D6258EC36409A35C08C7C0978DD
443669637C5D136D814B62807649C8BED5C42A19ED4622FE019F32A05A99DC4E
0BDEE7D2F644A848B755455E419051858D117524B5CF4856C840072F2F75782A
EB746D1844430E4DBF45D3B38CE3295EF990B608DD1C7E11110E5486C68F1D65
1CB92329E290F6FB88F98D78070690A87EB4AA90BF4C3E82F1F30273D0FAA192
FFCD2269555AFAB29E94BB00F066C47F62E037B2BEDB4D358E8BE2CB75BC0519
FB17F07F53AD1F6BF27BB62D65E8892C4E75ED57D4E2CBF1181C315B84FE4DD4
833329E2910E15A243B635A38E7D7714D12F1B9BD39EF436EDBC18505EAB3673
43A06FEBEB637FA4D2F60EBE340F84FB0533851E8318351A59B6D0CE988AA161
11899FED00426A42DC4A0A6EA9635978DE7760905AD771722514ADB746D1C136
2EB3F3FF312E5D37FE8110F60166845440010E5DF9A459DF3343F6C4A2E81665
1792602570CC368C5B872AE2538D11189DDE8552B5DC8E64375C8B10ABE0680D
2B94FBFED1D96B49E2801FB1CBBB19E41146C0576EB255B1DA67EAB5C2E92BB3
73DBB792E437A7F6B36CC463E1AE17BF154A887BF73F3EAACF80B91C7454A43F
526E22B325F2FE3EE89F55800DD052796C6F8E11D910DA196FF5C22293811163
2A755CB6E2142017DD9D9593FF9D501D27DAB4204A51C7BD6B2065C6BD32CD30
6530DF31DBAF8B2F5AB3D1AADFC3A925D92B31D3BB6EEC50A135C2416172D129
C4DB4554D9A68AF13F5B8F12116767F6AEAF7DAB79B3431A750A21A5CE33908C
363D6AED58EE325B365B722A8DD971DA8C9F08977F6077D927D1FC20AC06855D
811723A4C81A08041312C164BBECD26D6ED5E427C45621EA4508B23EE444DFE5
C05957F6D281352E186E6B176A5FCBCF714F095E50623A222EE625F3BF60EF10
C1F06C2415CCDD4687C59FE6C00B77E1E9CAAAF5F9B14E4763A7DA4BCFB1666A
FB9CF9B78B32D37766F4910A0B7CEA564665FF6BD4CEEB1F1BCEF1E94B851DB7
7C61DDD1DFF4C527909791BAB44AEDBEB7D418BAB303FABD8471FBF3E7622C9B
AEB429ACABC2561875C33653E2191AB3D340B97C4F0FD272FFC619D90D9F0BE0
B97D397BD4A157579D73BAA03A01B35FAF5302AEA4F8BAB1EC018483A29AB98C
7900B93C59CF61BF38CAB152D18832740164AFC196985901755B3F6B2BD2EB32
DB8599AEEC846F445FF315AA16E33249F0E3F28096C707AAB695FD412AF9BBA1
8D28E2FBAFDC234965258C855211AAF1F3EA65BE05059EDCC7C8776F77FB3F41
A94B9C473834C9AE7034D30F39F60C22C700D493CCA3558B55AC501C1B1EC298
9F205F257A4B85943E0EC71EED582E4AA66C37E949984F1D0058803A3B68F335
E02A8F21D8A36A2DC3AFC2AF88D1584FD65DC17EAF51DA277D68DDBCDB961490
B0CA81B05DD66913965C23F8466109055174DC0A91150E371B762540FE884339
E1AC2FE963D04640A00183B251431981D516D04948E46B53E71A47646A48ED2A
C1E0F981DE91853A30924DC4B4C0F2E974A63EE9E84521C38E26047F16BCF2AA
F13025A41503F4528EE8629A27EB5BCF480B3ACE46D4140FAC256567333C6B81
31D8ECB611E69FE06000CA375F9B0872B5DD5B604BB6B3894889C228872914E4
1C91605F90C5393556CBD71BDC725F37462E87F0C12D67A9E16ABC5B1551C3D7
0FA567D7C28BF759B830F649E48E6EE6B354ACEF0CBC94CD26BDF1F68F6B4B85
1111B4683D9F786FE7B6D7D1DD8099E9742871BA86E0BB3A1F0BDDE24FD268E0
51402C2001A34CA303086A2481BC6792C08521B12C2B7171DD7002B400DE7CE7
43DF25F74414D1BF61549FAC118DC24C8A870E537621080ED6A64338DB34460C
F060FECD42945FB7EF323A815F8E23D965B4E818DAD2426BC34F16C463407B33
351466C6557B0E2246B924CF36E3CC7E67420828F0DD3BDDA9ACDBDE3655A481
3C3EC188B962B2BCA80B6FA25F5F8A54D59B1A148DB2AD0A5C7566ADCC07EDB5
998413E931CA1B59A24F6DE003BEC19DBE673E1D15A4BA821D65D8B5D24E0874
87076AF6280EEB16ECB257CFE51B4680BE5FE66396FD4BA45F520364BE7C709E
F9F547027CE97924CDB3B16DEEFBB02CAE7FB293BCF450D376E197BD95924FD8
C6D3A6A286CCAC41A42947DDA64DC070FA061AB0133A5FD9FC449675CE040214
0273EC65A90C5EB8D7B29202ACDA3E01566C807B313D84F691BB28E5588FA3B7
BCAA807A6EB5E9CDDE79A398C4E72B278B8D316363ACCA1DE04A38A2FDBA7AC5
A23CF3E3AE113627EDF515446A250784BE646605721CD0A4D6C4D6327D2F2641
FB303527BFCC4B097F9E6C268D706AD4075336366E48482A3ED45A7FD976B04D
6B8032FCEE5F1500E725D8187ABA6BD8C8C8B9F0695A11A4EC10310C91582E82
D20FB163A355DE1A8FCE36C616131A2CFF846452D45FB726EE335188AD7E10D3
43414FC6894F774CD9D48F0E82DCF349F74C0BBE3A0628F7F82000DDF0ED95B5
55B41D433A1DF0CE543B1A8DABB37755A607AA3680D9EC838D938F791F11FB50
7DE81240BF77AB2B9C9BA29DF28AD19E1431C0D092ABDB8800A2864E0D82BB35
F7FC298A0702B9770660D491E022B12F5128254A55CF1F359A1EA0FB17488DD1
F3AF8FF8C5F372E747F090F1686DE94172298CE22FF5ADBC64698F3EB0FDF8C1
B9A11621C2A4A0878C2D61DEE40ECD9206CB74B5B2AE9FDBA73F4B97F927CE46
67D5DD99FD791D6F3C34DD0530634B679E2E0F74DDD7530C49236C50443A2521
6453CC6C7E6498D53719CC71780780CB9455B4225ACF86539F9B1F96DFCE19DA
7CBBCCFC53C509CA8CE902718182E8FC7D4AE301B5F3AC95CE793573C7E9BA38
C342D13AE5E7170F7B6AD70F1DD336284CD75E6C87FE27677C052EDA284E229B
DD8FA7BB164CEF2EC1B565AECB9B03F6043179B4BC5A9127E190A73A840F3BE0
D7739EF2FB0E8E7200FF238B976695AAF5EA8AF1D36D378DAF5C150925F50450
80F813182C3F830F0E2EA71DCB1F7318A2A7FF4E89019B2B923A18A5817FA8E6
75FA361F44874E059A355EDFB3D6D35190D59ADEF3CBFBFA1E3862F1DF053B42
793745363483FD3D77912134365AD8DCF6CF5E12DE0DF2AF76EB57E26266B937
C55D96F51871266A564600C70556CF3596AFBE0D307A56586E890DE8BADFEAB0
921064B56FD86BB8B4856D796BDAA1F9401095BB3646935B4CF8671F8E3DAF09
C070473CE985AF5AE872E99CB4D17E3BF184BE939F532859AB41537FA494E6B2
0B038F1AFF161771817011268049FC652E06B7E6C51DD9D319F809BBA9B7470E
BBEF55616DB3A6CBE5E58B7A309A1C89FD4CB1E74D55DD18D7D3B6A546AE7F82
63535A23B84F49E4DD88652C4BB1F17D04C197BA07147113C19ACE8FFC24C188
D437CE071272C0335332AA65B12271664AA4967319AA5E1406B71FE8CB329D93
9D565CE8BC153E932DEAC97F8E0E65FB6DC8469132FBE6C3BFEDAB113A19F891
C7296D468E1C677A1926E2C6AD84109AB4C978710C8693FE34A72718E4BAD736
109C40EFBF649A1E3E466FB8578E11DD27402CE33537E8CFD172BF8568419407
8F6E8A0EE71C5D0ECF5A94B9680E9A7FC28AA09DA324B7AD585715828356A7E7
1E05D94C236F622911C0E542307DFB7789B1B76EF2321BBA3F0181D209B5578E
3F5A4FCA8822D9272A03412E4F666A117F30DD12A808BE041C4B28B32B395BBF
5679A2A34266B63A97B815B8B0B290585B59EA48AC1C07697A4CB5C75C9A1907
54531E13C197D2641D368B3E9B93F9CA4E43D77F8ED7D445C0DB0C2EC3D76146
E4AD420E8AAC3B703C6667F5285968A71F0EF03232BE7C8C019328EF68E7CBA3
C8AEEDA68BD892E78C6EDF328FE1C6D7C7E0FE1FFF12100D702CD3AD5772703B
6B74ACBA7891B0C4CB3819FDBA21E5651A1FA0C32C4D129A1162DF2E9D43A1A0
6111ABC322D5739957B3C8026A94DA6DDF82F32AFDCE4DFF3FD39D5BEAD19D1B
D2188F05A42C84BA2D1CCE03383447044633A112A5F58E0E28BDDF7D175DA7D8
251322A2C7B6372D3B86EF548C399E2FAA2D54FD792628E08FEB147457FB6633
5654D7C3AA0192E0A23B24F1F13BD0D55DF0A8408D43CFB494AEDACC3983FFCD
9307EF963277752A2323B289497DD39334F9BE5D424B0B5234EDF9B67E97BF7D
00050D97090F8BDF484FDD9D9902C79C1E0AC838123E496D5D01D3234EAA5C9F
33B101BDBDAA0FEB97201E50CA283961D1EB5B690C8753E7394939A9910B5454
41FD74E4EB27E3580EF554D5DA5E81148BA3FB36F8A6DB7F9CCAD89F94B85CFA
BFE297B76F2C80E756139F8299707A1D5E25A460BA83A4FC00CCFE0ACB58AD44
305B65E84F308D7A60B880C4D2E2B84F32809C09ADA70E036F1E3F3745E23423
907493720013011A353EEE8578AE109F9F3709D6053B0D55ABD02E5DC5F33248
7F7AC1787B926C44424513035139DB0AF6208631676F388E45D39C6799CFFB8C
B792C2B2F6C3063F0BF0F35A87A4A3090B632DD53B6231A88CC5D225E4FD2A01
49ACB7DBD6E62E4772543FC36E7B34D2C835ED3ED7E52290F21E473F9511F14D
C814F854DFE1C6A7D9635A54F90E734C2633DFE3DA407A69EBF71709A833CAE2
345D8F9AF69E840C8941B1DDBEDE96EA2FD6EEE76573ED75021B9968D9C318FB
728A3949B1870CA194C3A748A93C3BFEA13DE49EBDFFC40ADD7E1D14974A6F1C
4C62C814A711721940EFF637C4874125FD6394C7F5889AC85FB539E23552AB0F
0459A6904581FF37152E560734AAB6BA16A05E1413FB2B00698530CCFB362B8E
3516B895744B925F99F12B0D8B62B692D70F1147C515AE97A813C68F461C3F60
8464C2ECD6F254F9E9DED3BB830499D3EB130919C8104BE7D248D9AD5D1CE44F
4685D12C81547BD44B6C49D1AFCAF5E158C9F3A9F4E302CB0712E81151E9EE80
F25562F6BDEFF0C6FAC1566ED6C282CB1966E94A51BBE198DAAB10221368E939
C7DEA4E4D3A497A0630ABCB03B17023BCF52B8D1336E5AA488B48F6AFB84A550
1A4749FC2FD80FD0086BCB2D583C5428037F2DB1179C5D44D39F67A62252587F
BCD6A7DAA2FA72A933D057A5BD7CAEB9723992CE7899DA1170AC2A35DB446066
C5744FD10277C924DE5DC70F605190083346990661D5538B0FAF5D68DBFB1040
1B2CA9AAFC2FBD7278EA5D2578855CDD097138901D6B6281344D24495D249AC3
5E0EF32D2B2C33EED2694C202B5503196C7D6A92EF8A177ACC74C98C9D3EFF3B
8B168F61C429201E5F9599F3C5708E3FEABCB88D436BC253D9CD32F0C4A16C2B
ADBB6C75F104A8FDC5775ADBF10A3B14DBDC4E869B64AC4ABB3743B0AC4F397B
06FCC6A41ACD0025C8F4F50D6FBB4F2EE9090DB1ADB0A427D72851F54BE45B9F
94777D8CA8A3345927E81268E3DE5C420633F55F10C072933689BA19AB935FB6
3437365FFAEA859175BF58C3C8411F6FCAC006AE3DB73621F4959D668650A3D5
4432AB2F9680B8D021C5A5C36DA4BDA788C96BF91D5C35A486E691B574A84A10
C3201887FC3D1D574ACB4FFACCE20FC385E960483D1438522CC8C3582CE60C8D
4FA59D03DE51C48725BE0FC9E1295B613E680FFB5048AF54EE426A3631ADEDE6
28B34FA7018653E3703E432B02D70026A306BAB972C177A432C70DF739664C4A
E50A0DF8DA3E2E9877224D04B1A10BAF13BA146589BE2CE08DCE44FCE3A4C0C6
367DFFF1276C38EEA12ED668D612E07EBC280E731D56028C52AD72BC01722B7F
3A9124758981F28BA23E8CEC9F818F0F8440224612FBD1A32D93F79AF3690C78
BEC39E1BB4CE4C16E269B6EFD4F6B419DE9649BD8AEBF057826CE4ED49067426
FD34C318202942AAD2799D607F6C9FD72BBCE6511DCCC8C806C30A747C143236
C32C4DE13909717845997E8F032522B2DC06B79C84B07728C87228E66B4946A8
11433C8CF418E3C7C31EA9F661921272517AD1BC2D8A098F79517739D98F2086
2D36580F56D0C64CC3D35780935C16FE432CCD17A692823151973EE88ADA8844
5E14345B9E2416A0F0E32132A74656B03A3338E9A522FCC0DC1736A392E60BAC
0E59C2EA8360157224E274EBCF112B4574FBEE387E6BE9FC28CE3B78DE7B2F11
549E7B476FB8E82621E4524135D8D802178B773C839E0CB5194929D1963426E6
1EE6D40DEC5F750D8917764DCCA241AE8A0B301139EFEBD0A97C7D6425CF5977
0297A360FF95E3D459DBAE9734EB4919A58374D7BFBEB9D787F984E7501C84E0
68704A6DC78704885EBC5E6D8067B497FF39C0D5345CB661A393F003A2432D40
DECF045334904E87F76D315BE4CC332701C08BC7B0244567B8A476302C273DFF
AE387F0AC73D2742B76C309BE7D9963C3E850179B2776D4782CCDC0BFAE2F3A5
CB3B9F260BE286C444DB9674FC0B576B845D7830380876BB8A2192F81F5F2780
AFFAC8F11EB636186CACF82887D2949F2BBE3091E2EF7F2748F1241D88FDFAAD
63F57148EC3AB5C11E1ED8B95AAEB33E35A7DC5E1D0C861B9D865BFE331698C9
053BC438F77BD8BE20CAD658E3CC69BFF45DEA073AFB04BD98D548CA6E387A2E
EAAC03D79911D4B98A194FD96FE2E9E11D2917C00B336C48A5B8E1728F80CE66
AD9DA19BDABA3B79D2C2111C97A356CA4E5EE01B4C0A3975637E5C89654EA78C
D88B62C9C0C771EF3C095107CDE353FB17EBB24FAF5EEFEC51D6E8A6F3D57E70
C2BBBEEC1A0FEEBCF585C086229F40F448EA0B81A936DEFDD2DFEAE89D6ECF88
C8E439518D777CCE27DC646F334CF1EA0923DA5DB08F9D660B387810A50B0359
7396E11719783FD3674434B8B1C49CDB9ECACF342D421991E9239E034F9A3AF3
F222652F15803540EBADA7358645DDA84BC79D0B8EE752E3F46F7D15E9566DF5
3E71B315EE118F2B67828165D91F3FE90D00FEFF152A3CC88E12EECF3B928FA5
BF4C83D879E9AFC746519FD3A412F1F4AE3EDF81C7728F1ABBCB53A0BA9EE45E
60523BC0495F9E8077197ADE9E039C5E042B1EE232E74244E06D46372C65342B
56E75AF8A1C68E29F32A0796115683523F07407A3BFEE417F18CCFFE59C9B7A2
CFE004CBE8CAF3DCFC5FB1FEA4A227FBB7FEEBE4A9BBFD97C0103A606EE210D8
0DBDAA3B73FC0D8791246134462486397F0CABAE7A1AAEFEC5AAC2542134FBB3
49E854D9D08E952E20508C8DCB534D1797CAC97F821F1FE28C36750A97222319
DF6DA5D93D263F549FE8F7B914CA6159A128CE82E028B1CAEA08DB59241481F0
7AF76381951256355852C05C7BFABAA74E25857DE8079354707465A711A6158D
51A7CBEBCD0107CE3B9F74A6C053E15625C4DD233916F9731C8A19849E1C8D3D
3EEA3EA02468723A5565596AEF6C94F8A3B73D672F81EF172CA3DD43FE1E0276
E876F09B53354B1238D1C2687DCB2690ED5F90987A1F73B0DA9E75FF9DC55E28
EE73231A497B3A32E01B7F4F5DC943EF8EEC3B8F05BBB2EF25A54FF3B5B89923
EFFEB0BE9BDAF5C99ACBED530F435D7A90DDA44D9C547DE8C6050B79C4A89CB8
8706F701DE529E721F0829EF02EFDFDBDB62802FD8CD5A80EE83D0B4F1CE2FAE
8F871C6FE5F18FC110180151B837FAFAA4390CB3A40D9181B504188F435D678C
08FFEBF438848C9E8C3AEE23A3FC74BAAB022DEF27632C0BAC4DF6223E4E00A1
BD74A45808F80AA7659064343FA59498A52722D27EC16E99B34D20BA751B4DA2
0FAD8C4D16B7F98164615082D430CB4A5E9673F922DF7F9EAF8EDDAD5EDC9D10
1B9503406E54EE6BCAA0BECEA9AE9C9995989ACE871DE2EEF62D7935E913F62B
A89211E363C2A7261B4A1D54C8CF1C0F9CEF4F7438DFD3E5369187CB56CE6BB9
D7301F4196335CDDF5E2334FC89E35FAFB2447F9F6D97134FB2F95F13D4715A4
188337B528D3EFA13D34917A463891EA4FBA093B00A867CAB21CBCFCF9F74A23
4A6402D416195B7751D56B3E1263BFCECBBBE29F7C2349EB3F2459984572CB9B
3E37E64B51778D460A139CD16643777846A566B7FD0F541AD1106E5C021D6AAE
B0CC5F2E79148B70A83CB75D3E2D7F187DA3F9849F9E17B340FBC0E6C208C3FA
BD5167C9F6B84E24B2087FAB665054E0F9D664326B2E04E37A7A1212481C63C1
AC24119C0487CCD7248BACC448E3F7E5EA3C74EDFF7882265B04944B673EE87F
2BE4DF67CDAD7FD7AF2F43A7BE677E38B1AB9E6E59B501DDF63D5A8AB859EC65
489835487EA69C901C738EF103C0C70C31A7E6F4BA2FFD4F332FC76BCE6B3483
252B4D7A3504D96DE143160B7D8B96534B4230A88ECD4BAEED373C2232455D47
E77F1E1CF0791B88178D08DF9F420DE92756294B6FA6D0AA7368D4908E3DE05E
97204B2D474750D49961BDDA815DD48B142DBB3E1D1594B9FD1CF0C18C5608F5
3F92CC0D3585A2BAB17C89D77DB51E96136C29997F759E1AAA683516DF289088
D9CCDDDAEE62208E66F782DC8D664E65DE312935A1D43ACE9ED369FE8C54F31C
026B6799C189B9BF82049BBFCC73298318B4176CD63FD89587487BD6BC96F405
589F1A6CA8DFB1AEA0659E19EEF6CE717AE80FC218C2900500922C84CDE372ED
7A40C9D64F8A6A4A25F8F12262ACA5D194DF9A0C0904B2801E567CCFD48259
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.1: CMR12 1.0
%%CreationDate: 1991 Aug 20 16:38:05
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 54 /six put
dup 65 /A put
dup 74 /J put
dup 75 /K put
dup 77 /M put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
/FontBBox{-34 -251 988 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B169CD5365D6ECED5D768D66D6C
68618B8C482B341F8CA38E9BB9BAFCFAAD9C2F3FD033B62690986ED43D9C9361
3645B82392D5CAE11A7CB49D7E2E82DCD485CBA04C77322EB2E6A79D73DC194E
59C120A2DABB9BF72E2CF256DD6EB54EECBA588101ABD933B57CE8A3A0D16B28
51D7494F73096DF53BDC66BBF896B587DF9643317D5F610CD9088F9849126F23
DDE030F7B277DD99055C8B119CAE9C99158AC4E150CDFC2C66ED92EBB4CC092A
AA078CE16247A1335AD332DAA950D20395A7384C33FF72EAA31A5B89766E635F
45C4C068AD7EE867398F0381B07CB94D29FF097D59FF9961D195A948E3D87C31
821E9295A56D21875B41988F7A16A1587050C3C71B4E4355BB37F255D6B237CE
96F25467F70FA19E0F85785FF49068949CCC79F2F8AE57D5F79BB9C5CF5EED5D
9857B9967D9B96CDCF73D5D65FF75AFABB66734018BAE264597220C89FD17379
26764A9302D078B4EB0E29178C878FD61007EEA2DDB119AE88C57ECFEF4B71E4
140A34951DDC3568A84CC92371A789021A103A1A347050FDA6ECF7903F67D213
1D0C7C474A9053866E9C88E65E6932BA87A73686EAB0019389F84D159809C498
1E7A30ED942EB211B00DBFF5BCC720F4E276C3339B31B6EABBB078430E6A09BB
377D3061A20B1EB98796B8607EECBC699445EAA866C38E02DF59F5EDD378303A
0733B90E7835C0AAF32BA04F1566D8161EA89CD4D14DDB953F8B910BFC8A7F03
5020F55EF8FC2640ADADA156F6CF8F2EB6610F7EE8874A26CBE7CD154469B9F4
ED76886B3FB679FFDEB59BB6C55AF7087BA48B75EE2FB374B19BCC421A963E15
FE05ECAAF9EECDF4B2715010A320102E6F8CCAA342FA11532671CD89EA365D66
6597888FBEE7697D11D08748495F916CC8107219792EB77D01AA17CC79449D14
47EC032E14BA2215A0673BEBD61022E800799D7ACA3115C127F9A96373EEA973
982947DDABD95C1C8160AD851C9E89DCCEDB6DFE78E03E60311B1D821246F1A6
51746646ACA74D229CBD41A9D658C0F767FBACE5865A897D64AD7A557256B45A
BA1EB5A233BBD3B9424720350F4CB77AB8D4CB521E172F3BFD2134E7D3D8E8E7
DC9B0FB0D8B9E0C3AED068CF51286176C72D5D74E0CA523B177C2A252395105A
3E7B720DBB036341A219F94FB72D4CF59A0D9E40E55252CB65C4B1BA941A0440
4FF1014B8091DA0CB7C5C7300C32DC4C925F4583367FEE114573B06511E96CD2
EA0A3A259F4853D53C388BAB4DF1ECB93216C822B377A96EC730567C9579B87E
7FA2F5021B548744106E4BFDAC3E64B3AC0F91D5D28FF5F35A766259199D18A7
08CD2EB5BACB70C8E756A58B625078EDE28EB2D391BA262C0E82F578A1E293F9
B311A61A0738330CB42E60D7DD87069EA533FEB47D03F2494C3F93411E78187E
B95DB5D58D327999C35B13943FEFCE94F4E4A3F27CFA94D067F11DEDA68E433A
2D78AEE8CD9C3421DA130E80D27B8D0BF0D5A5162AB55656EC1A6FCAA257FB5C
FC4515E350B139189A1FA83D88A25F05E3EAAD3F8E55E6DCD5D2092BEB9EA737
F4069A5E789AE6EC6777F557F67194809C14A597CD6FE6EC9CD8A534D4831989
03080F5F511EFEEDF474EAB50BC51AC327A817A4D055349655DE2AF446454600
9F06AA85FAB4D26F25A61751ED8E75D287B55C0768844371CDF80573EDEBAAF1
B39A8FB19BF8391B93186C79513352DB7E61EF63FBA3EACA093A18F4AEE247F3
9BB218321D2357B3E083D9434691E441B84E2A896E6D7341788E0B4CDACB7D44
4487DCC697DAE25444B70FB951961B66E6A2B2ED913E83BA7ED9A4E5BCF0B7F9
5C972BADC1DD2D8A1086C1BCDE161E08D3170EEF3F60EF5957490CC9FAB4181B
E5C09E3BA240BE3F7E0E8B69C9003155B9D5D4FB4293E142E5B36F41E8F45DEC
C8F532F87401375B9543F92F6051A78800825BF8F9BD28EEAC2A1CB190D13F66
F6A427A384D2298EBEE21E5540D8A40F0FF4D52543873B10630981DBB2C9E617
ADBAE9866F90336ED9C5393475D791128C14CF7916C35261CE130A10BBC58E55
157202159DEBC5468BCE4B42A763A53CA327274500714BDF559746A490AFF129
898581321AFD6260D9E1CD115C7DEAC211DD6D05BB4C5060C6B6C9AA838CE90A
AC9BD0386D89BA3B71333FC04ED00C099C1CAB0BB19F9A2B4248C22D028D2A9C
3E2A682D35E8AB01D743370C18BC67E80A94E7783C96755B1DBFB45F301DACA6
14852A807ADF6EFD6487A2C75BA64A673F4E794711D6A12F5D2D58AF72FC1B0C
958C749B45A80D3B439FD9CD662262F779C42C9BBF53AC03CD5AC8BF96F8DD19
52FC3FF1C48912E7941686B11D6F167039D8FB230838D7641143E6BCA613B925
C199B66FEC1D94504BF517587D465C7B3BE037EC81539C24D8CF84CBEE8BDAA0
D0F1E49AD725145AD7B239881FF2A1C9934A074B39FCD794A21980AF2BDB985B
C25A5DE1ED314D1E9F0C664C5164C5949004A7C3BD71EB9B83FCD3643C5C6EC9
CBEB455B222DB9A5BAD7CE281F8B8C53B6ECC84BCE6B5EAE6054BF6DC6C02640
ED797CB5287B822FB1A9EDED614A06CF8E62EA1FCA5EE0FC67B4C2E4F6C88307
CFE74CDE504A5365DE0F7937788A862425D2E905E88295D7234A89ED433BE973
AC224707DA7ADEA5D3B62239AC1FDB7B1AB0E484AEE40D2581D10AB8CD88539A
539FF79A92C8E3A6E00DD32C7373D1D78062DB16D1C63264EC84F8AC74D15B86
A1FB8B7111E68A90B0D062B1AC0EF09B58CC00CDE2E88E8129CB83194FD72772
F355E5A1A7603481A797E79FDACF9E362ED778EC645E73F30E510CC7762116E3
27199C4448DE979FC84620CC76BBF6E8DF11BAFDCF3AF5483190A36DDA15B3AA
AA1A968B273C699136221314CB24721722CC948E68DDDC5D5140166D84D0340C
9DFCBD23CDBA0AA603D25377F26B5973957A0DDD4B309AE778E36DE87145F137
30265891104DF06A249D74BA05ECBEDF853D2BA90061CD843A3E061A05E5596E
EFA795E32C6A719A1D14E0326641884BEEB39C199790B4BAC08E10DC3E9F65CE
4809B74F591FF38C47B4CA9BD593E5E45F5B322115D7C0B246CD3016551980B4
716DF21A18F2E280652E5B8FE8541DE1AF53D070350036962DE80E8577D9E82B
84D674671B3B52E317B038DFF78CE4D1FF83DB704A0E4A4E29D8686CE6EA191E
37D44DFCB9162028E34BAB71B4B2230C97EDE996C2DA47032B0ABD86E7243DA3
2A56CF0913837FF65D09D704008D4FF1A2687C060DC4E32FC4B1457EB4063478
AC9A9900E985CC60581AF12828F3F6ACAB963AC1B831E429B570D27E7D802566
E9C867E7A338C04831E454145865F2D0FF9E7CF1C94C882BA610A03F8C652667
4D9FCFC048772CF95193B362C54D3D2BEB449C2424AD7E65118EE9AD75F7A34B
1232220676D0972EA92F20CC2352310716ACC2A2B1BAE60F073A00982BC8E8F6
CF624E8D0EC808C3946C4717F0942BFEA7D2AE84086103204B60AB4AD27FA611
5FD32062927705E4F40FD5739068BBF23E15704715AC652F49FF7BF279FE7234
7486090944A19C291D9141688BAF3D3FF256EC0F8136C89130FD6E5FAE5CC5B8
BA0D6234BF9D13373E74582538294BDE51DBE6C881B6E50FE505BF3BA8E420FB
824383A71824340EF7077D30DD4E73986CA38D0CCFB5D470558F57C4ECE9A3BB
D04F193B523B2C7DC07C5E742E4684DBE49979C7DBD2A635FD38856F7B172939
AD031323A964A8690895A0AFFCC62F172FB16BECEDAE9885FCB8A6124BA653D5
ADD6F6F745B04178D862EC10160A1DDA49259DF07B179175A1F5C114A5B44E41
8FD2E5C1B5FCCB24FF8678CF86797CA06D7AB309235ED5E98613DACA93ADA633
9B5BC4CA02C552F17BA7FEF3DD538788207FF2F295DD6319B0A657D5EC3F2EF2
84308992F843F418A02409191D58C5DB5DEBD2148BA3782372DBED606B0AF5C8
86933002B7B278803F62FA0DB990F213FB16F62EF1E9B1EC3247738B3015427D
1679019F9F64827C9FCB5364174ADB2AF68FAA5A43FC0420C1C371863C34613F
21D0C83FECEEEA0BB5CE2F098BE442026EA94A637DE663D297BE425D2B14DAA9
8414B4486B0ED0C63D15D3F71AFD4C1D03FE410C3BE4EF9D6EC1392EC18F9FE8
B53327ED0AA53F8F61D119814F1EBC24771870081C0F301BA9C509551EA10CB6
D5625291584F6FA2820003ACB7CA5594A01F67BFE4BC095846EDF5D6615CF754
E861CA1C285863EC0B2385329ED21147813A50F1B7E066770B35F9EC092713F4
9055499A28BC81174088A505A99999014BFEA3A01A20B2DF1CFD04E550B7099E
C0CB95A2A5906FA28DB64A6D96586EA6AD077ABB6D3680513C5EA59D7689DE11
46ED9CAD0B42DE653129F5C617D3BE4943E2C32657DCD87B0FF4B4745B9A6EFA
CB36FC1D3AFBF5EE8BE8716EEE7EE292305DC4169DC656D195CF8D6F6BC749D4
59A13ABF690A3076E4146848E7DC09E7A5115A83534D7BEFF56A6A5434C460BA
67A1575574A86BBAADD51DE725E6882B50CAADBF38B4A6FEAFE9B805D9D667CE
A111C904B8AC8F9CB07A25D5AA827555779DEBCEE1355A81224C62E74A4CF09F
EEB1EEAF0A7B16BDE821FD1DC86C32FCC842C61948D3A706E5F59969903A8DAC
1DD21C606501C0C0ADBD2A38D98C60BAC15B27BEE01B0DFA987CE26E2FC9A1C5
46DDBBAC2EA6453F8CDEC4E345834A57CB6D0910454B1971215581500796674B
6BE1211C99168220F5169E9FB6494753BF1A08A4027D57BCB60BA9B7E0B8BED4
C2CAE37A18EA6572B3715345BB9530D045CD390B4B78BD3D6749756554C692B9
82F88BE6095034939441ED5EF77DFF50FDF2B1A471F46DEBAB85C46D98DB9AB5
DDD6EF63DCFD61D53F238F902AA73D3958EAA14CDC5BFE379395DBCBD6E492FB
4208147AC500DAA21DE8B9CD0EB4C91C5712188A7DC114D73FCF7372897A732F
1128251C1110B4BF600866F7DC5EB6CE6ACD34107031CE130BC33C029C22A6F2
56B2BA51BA35F02EE3A4E513DC6742F9F911B1E8EC20DF2E90C8BBCF3D688B0B
C9E44CA00D522987DDB213B58751F748B471E35FBFEE77242F522B099D3DC274
EACFCAD286BDBACFF5A9C6E2A3A234DA6E530C848E594487A12FEBBA90A2833E
C4E06AA5CF8B680AB0FA0AD741032BC88F4EB08A525B8D7F9D51C7E12454F219
A9C375E1FEBBFFFE72CE825BD8D1B40BE8E7D4D285FF9998367FBD03C7CF784E
07CB8029188A56A7F50EEEE62C783A730ABB16344E8A4B0993D89C6213545F7E
82B312C0A224F2EA6D22EF1ECAF44765E2F28532F0834FD0921C01A154B3F4B5
3CF17A80AA41E8E1A20F810676C949A38E1EF64D929884EF2C2492C524D80DA4
2A74263FAD40EAE0FC9BC9A6E81EFAF722515AF4605C40933AB5399C3DA1C322
3A0C52A987EF836B01930C80FFF4522231E0A054A41D96528C22E215E43A0967
29A8FAD6D2A0EFB29300FF08F784C488DC6A31125AF3906F33AFB388C1327042
11721F568FFF4D36546C5F9C748AE594A23163FA27C601DC8C16512900005E87
3FE9C2554616
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.1: CMR17 1.0
%%CreationDate: 1991 Aug 20 16:38:24
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR17 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 101 /e put
dup 104 /h put
dup 107 /k put
dup 109 /m put
dup 114 /r put
dup 117 /u put
dup 121 /y put
readonly def
/FontBBox{-33 -250 945 749}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F075EA0A10A15B0ED05D5039DA41B32B16E95
A3CE9725A429B35BAD796912FC328E3A28F96FCADA20A598E247755E7E7FF801
BDB00E9B9B086BDBE6EDCF841A3EAFC6F5284FED3C634085BA4EE0FC6A026E96
96D55575481B007BF93CA452EE3F71D83FAAB3D9DEDD2A8F96C5840EAE5BE5DC
9322E81DFF5E250DEB386E12A49FC9FBF9B4C25C3283F3CEA74B8278A1B09DA7
E9AE4FBAAF23EDF5A3E07D39385D521547C3AAAB8EB70549756EBA8EF445AF4A
497CA924ACCC3DD5456F8E2C7E36946A5BF14E2E959895F7C94F49137256BE46
4A238684D52792234869EAE1A6D8ADF4E138B79472D2A90A6CA99E2394CC20CD
3841733046175B20CEBE372327BF13428EED6A3E2FDF84C2DBA4B0AD584EE9DF
B51828D3B8F385846158C29C9AC3496CB9692DD10219697B2ED4D425C3957FD8
C4600D76E045C561216EF05D38177243C314877A69A1C22E3BEC611A2EE5A216
9B7C264CF6D1839DBBD78A40610F2C0D7C2FE09FFA9822FF55035AD52546970F
83EED2D30EABB1F303091EBC11A5379B12BB3F405E371519A53EA9D66174ED25
A2E55463EC71A97BE4C04B39E68112956117C8252DB6FB14AB64534B4BCD568B
246DB833982B38CDE7268BBF74B6B0C18091E1B1F87D32D66F4DD023D1F10D2A
7736A960F72AC01F733A11023832CD68FB6288A5977743F781214D8FA9C0C3F7
80001321D4397771F728FD9EE57CFE7D9192B887EC883EB1505068261DC40089
7B7D2820F06515CD74513521F6397FEAB3AD3572D9A8269430E407E357422461
1785FC2782047F4C0339D79B16862D939F3A37F78E4E2174E4FBF132539CB760
207999FF86F6A3EBE48EB0A1CA635450FDEEF79EB16D853F3BF4B41F7F62EF09
F8C97D7BE8E8040BCF71C61854C7588CA4742399F2C3E9E33E3E8ABCFA7B9D90
CDE2B80608210548D7D341A89F4C5ED52F5E693E146C1493000986CC066052E7
9887C02F25307510B61A45648C1640A9F9CF356D410BBC747FEF05E7627EC24E
0D091114F1DA5125D4B27859331F68A5736B543A33A2B8903AD5C2B338766573
3FE9D9FA02739F03216F1F2D216A815F8C64E8C3DE50EA6AFA2FDC0906A2BDE1
5FB85D9CC048BC3F222FFE6D99DBEB0134435FD3399E6D2BC8C5E73735ED7C33
46F7E137C0E03694799B1B6B2B6A1AC8C60DD4FF4160F2E81E0DFACD6450AF85
7EE047E36C43723E60568140BFEA9714E8BA96AB101CAE27A306D9DCDE5CF365
6531675DA88E054A06EF8B6CD819D16EC907E950D45C45767058F8F4AD4CC736
656BBCE1E6E41E009B996A41FEC6C837C5E6062EAEA3A6F730257215F9D60041
CE96F6C68459E9B019031265B7E0E3E7721B6424223657A05C4DF7D73A3B414E
34C0A2A397E86D4166BFA67A4495366B69458A05A7E41BE39C3B160A2D277029
92CC43FA6E55A477BF6FAC02BCABD93A4C0B5D8EB9670D3BB99EBFE119212945
D6AE68D898A63FB77445329A63A86E78F24782A31EFEFF12C753FF39C51108DC
7CBEB8576DF8A24CA391C5CAB634C82DBC8BC30617045ACFD66971C036B50865
5E527EFF7BC843E83C7CE58C35D7DF39191B05910C5BF4A3CEF98CAC7E8BC10E
C5F8F2F0A6E81089F84A276F4251EBC993AC903D03397F819A469CC4C212C16C
55EFA4D318D3FF87E98CCCC1856ADD2344F124478C14B391DCF804DEDD842BF9
3CC301E5D007C41B18AAC21C9FB42C855793D86CB7D236653D2EEC71CD65E067
C5C8B78021E0BCA25F52203B812D31FEA162FA37092954866066BA48179ED3F3
20896FB428AE371B3967FF20D71B9583C9CE6DD79F4C63052F1F082F8624D543
F613F4AE5BEB5FE9C330C2EFBCB8BFDDACFD486D5E13E84E49CF9A2679F4BD6F
9EC0D352A95FD572E408BD6D4635FAB14A6180E588A21E564699479F48EC0272
3570F9519FD22A58F8049D99105EBE04270867EBFA7DA0D4F32003A26A831E2D
A52A7FFCB0134CA3F627813BD15D91E4C6757B21CE2B2AAFBE15A46260BB7CEC
68257A82A3EB1C6E50F14B5AC8D01AB926D4EA2A4E6DD9EDEF91E612C5EF8237
7B109638FF2B0253BB1D77C220E196B7F13C4E72F3F7BE892395319D39B9CE3F
5EB724A56A08F6511C880F8955EB7E9217A64869BD1A7B2DB312E009E54ECC48
5A7BD3A08FE55F4D0DE79F3628E53ED9946C5FCE8BCE0C035BA3D7252F433050
4E57B28AF0BEBF62A2F488EC315A842EFA935A4D635438D548135FCC582847DC
B03B227F70F3D3297C0EF06565F70D2CD86390AACFC991240127123FF89E73A0
958D22A1BE2796017938F58BDC07D7F49FEBBFE3B630F33956B7E60CC38CFBD3
30F47CD0EF85828104071057260FB674B089894CF72F225C64A6C13DA9A19D2E
1E5C4D51865A891DBA20FF565A71D1FFA7639A30508B62405EF79330449D5F91
9581C78BCA8FBC31B8626272C70DF3790C5680EBFDDEB8E4AD2D521CAD9A2A60
393BDF2098CF910741A8AA443CB26223372209E4021E8E584329CCF0098F6468
A3183483E3F90F8C9C7BB97171DD2E4035CA442E7E0BE6CF28E4E2199D0D26CA
0DB27B6E928AF9E391DFC64CFCD08388537828D7FA949C4B3A7BD0244329501B
CF9D4E145F6C2661A119B32BE7CF73457829717C79AC84B9640CFA834B53ECAE
B43B4514617F6E11D5AAF487EAF3CCC0BBBF563F9C55C13E4BCD73174DD2D633
49DA310D90A3C1D530C7A416D89DC3ACFBCEE9A33089EE7EC6CB00BD42D755B1
DE1D54877B2772A6E12DB57B0FC864F343955EF365182C0D89D18BFDB3195813
A89364376FCFAEB44ED72433D6F3AA39DE20EF1C5F19C519B9B676267846A985
FB92FFE21E966AB66DA6CC541FDAFD1F3CEF747D22A4999EB6CEE5EEBBF1D80E
5B5736CD2856B75F26346A07B5BE2CE76388674D100F2DE5B73F7E823B863568
DFD3ACED60FE9AE251489E207049228544202E7B392DE238D60D129B85B9C39C
C64FBFC57F56D05AFC2B70C3FA0CE8068311547BEC6AE8567631A46BC3944828
1CF1D12FE23FCA9C53064A28D7F57AF36CEBED88761B8A7520C890FAFE77F7A1
E3487EFF22C9B2B0B2B8D7C1096CC3AE41DEA9252113876669C8BC5EC57E8637
C99891E78DA57288112102E1123D4EAC069D73AB5093DAE485C7C1473426830E
DF36A23DB570983D59E68DFBFACA81E93710E9B9C24F09E4D0EC7FD22A58B7F0
99CDFC345C69BA8F93B88292B88C656CF2D38FBE1D2D56D5B66CAA266F5C1DFF
AADED66C563AE51C1D519A67BC262B20028575C6C65D3C4F5CC693E0CEDE42D5
2CA02BE5A67B2D0BA9AD914296D9F0104207682D02C9F6089EBA2A6F3E052607
A949145F4ED13D172E1C1E8655093419A67E38E7ED9FF87DDFDEF86F6BCD3C7D
10229AAA21D8142B783E79A867DFFF8B7517C1F101CDBD714F1BF253A56FE4F7
329B23522B0A28930B2C351E4B4E5780B3F0DD8D1E5A315FA78C0998D5BFEF4E
78017C75F32A5AF077F96BCE7E8B82A097A233D28E9E22C0AF74B9A85265D74A
0E78FEF180B3E59364FDFBA85ABBB3E2E99FDC50646F98BB8A9E362CF5788F05
D6B7C0859D5FCDF98E4CFCA3330F10840AE7BE83AAAA98D6F8506EA9602599E5
8276CB28016C1C0B18547C37EB3E07D900F2BDF5F00821EC1B4EE696822EA7FF
12A375A632B17CB42BFF0998AB693E04B92A570A006C7680AC6AE6BF853ADA41
3C9E4726F567055A201926862A8AA6D6B50915E7B430F4CD4222A7638D9A4351
EE6C84EA48E0E66FA933EECDE17D21D98A760CBA62696BB226269802BEC2AA51
6F95EC9CE8ACC1CED5F9E13ECCFF20360011535D1F6242C8BE52572C786D66B5
C34989B56F40EC43F964342E8E5C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (week3.dvi)
@start /Fa 134[71 3[75 52 1[55 1[75 2[112 4[75 2[61 3[65
13[75 15[97 14[67 2[67 49[{}13 119.552 /CMBX12 rf /Fb
134[44 44 60 44 46 32 33 33 44 46 42 46 69 23 44 1[23
46 42 25 37 46 37 46 42 12[60 1[61 2[65 2[52 65 43 30
4[63 17[42 42 42 42 23 1[23 2[32 32 27[46 48 11[{}42
83.022 /CMR10 rf /Fc 139[38 38 38 1[54 49 54 1[27 2[27
54 2[43 1[43 1[49 19[89 1[76 50 8[73 10[49 3[49 49 49
3[27 44[{}21 99.6264 /CMR12 rf /Fd 134[70 3[73 2[51 4[111
1[70 2[73 2[58 3[66 9[137 2[96 73 83[{}11 143.462 /CMR17
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1305 432 a Fd(W)-11 b(eek)44
b(Three)f(Summary)1612 732 y Fc(McKenna)33 b(Jones)1602
988 y(April)g(16th,)f(2016)p 0 TeXcolorgray 1929 5349
a Fb(1)p 0 TeXcolorgray eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 150 83 a Fa(1)135 b(Chapter)45 b(14)g(Summary)150
325 y Fb(Rob)r(ert)34 b(Lo)n(v)n(e,)g(the)g(author)f(of)h(Lin)n(ux)g
(Kernel)f(Dev)n(elopmen)n(t)g(\(July)h(2,)h(2010\),)f(pro)n(v)n(es)e
(that)i(the)h(blo)r(c)n(k)e(I/O)150 424 y(la)n(y)n(er,)28
b(the)i(data)f(structures)g(used)h(b)n(y)f(the)h(blo)r(c)n(k)f(I/O)g
(la)n(y)n(er,)f(I/O)h(requests,)g(and)g(the)h(I/O)f(sc)n(heduler)g(are)
f(all)150 524 y(imp)r(ortan)n(t)g(abstractions)e(of)i(the)g(Lin)n(ux)g
(Kernel.)38 b(T)-7 b(o)27 b(explain)h(the)g(role)f(of)h(these)g
(concepts)g(in)g(the)h(k)n(ernel)e(the)150 624 y(author)i(pro)n(vides)e
(detailed)j(discussions)e(of)i(bu\013ers,)f(the)h(bio)f(structure,)h
(request)e(queues,)i(and)f(\014v)n(e)g(di\013eren)n(t)150
723 y(I/O)i(sc)n(hedulers,)h(four)f(of)h(whic)n(h)g(are)f(still)h(used)
g(to)g(this)g(da)n(y)-7 b(.)49 b(The)32 b(purp)r(ose)g(of)f(this)i(c)n
(hapter)e(is)g(to)h(pro)n(vide)150 823 y(the)26 b(fundamen)n(tals)f(of)
g(the)h(blo)r(c)n(k)f(I/O)f(la)n(y)n(er)g(to)h(the)h(reader)e(in)i
(order)e(to)h(sho)n(w)f(ho)n(w)h(they)h(are)e(essen)n(tial)g(to)i(the)
150 923 y(k)n(ernel.)36 b(The)27 b(in)n(tended)g(audience)g(is)g(an)n
(y)n(one)e(who)i(has)f(a)h(basic)f(kno)n(wledge)g(of)h(the)g(Lin)n(ux)g
(Kernel)f(and)h(w)n(ould)150 1022 y(lik)n(e)i(to)g(kno)n(w)f(ab)r(out)h
(the)g(sp)r(eci\014cs)g(of)h(the)f(blo)r(c)n(k)g(I/O)f(la)n(y)n(er,)g
(sp)r(eci\014cally)-7 b(,)29 b(the)g(life)h(cycle)f(of)g(an)f(I/O)h
(request)150 1122 y(in)f(the)g(k)n(ernel,)f(based)g(on)g(the)h(tec)n
(hnical)f(writing)g(st)n(yle)h(of)f(the)h(author.)p 0
TeXcolorgray 1929 5349 a(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
